Resume du Cours git 

git est un système de gestion de version distribué (DVCS) et beaucoup plus utilisé par les développeurs 
installabe et très rapides qui permet de modidifés, intégrer puis validés un code sources.

les commandes possibles :
---git config --list (vérification de la configuration)

Configuration: 
---git config --global user.name "name" (pour confugurer le nom)
---git config --global user.email "email" (pour confugurer le email)

 -----git init-----
Cette commande est utilisée pour créer un nouveau dépôt GIT

-------git add----
La commande git add peut être utilisée pour ajouter des fichiers à l’index. Par exemple, la commande suivante ajoutera un fichier
-- Exemple : git add .

-----git clone-----
La commande git clone est utilisée pour la vérification des dépôts

----git commit-----
La commande git commit permet de valider les modifications apportées au HEAD. Notez que tout commit ne se fera pas dans le dépôt distant.

-- exemple : git commit –m “Description du commit

-----git status---
La commande git status affiche la liste des fichiers modifiés ainsi que les fichiers qui doivent encore être ajoutés ou validés. 

---Exemple : git status

-----git push -----

Git push est une autre commandes GIT de base. Un simple push envoie les modifications locales apportées à la branche principale associée 

--- Exemple : git push origin master

------git checkout ------
 La commande git checkout peut être utilisée pour créer des branches ou pour basculer entre elles. Par exemple nous allons créer une branche:
--- Exemple :  git checkout -b <nom-branche>

 Pour passer simplement d’une branche à une autre, utilisez:
-----exemple :git checkout <nom-branche>

----git remote ----
  Cette commande remote permet à un utilisateur de se connecter à un dépôt distant. La commande suivante répertorie les dépôts distants actuellement configurés:
---Exemple : git remote –v
 Cette commande permet à l’utilisateur de connecter le dépôt local à un serveur distant
 ---Exemeple : git remote add origin <93.188.160.58>

-----git branch-----
 La commande git branch peut être utilisée pour répertorier, créer ou supprimer des branches. Pour répertorier toutes les branches présentes dans le dépôt, utilisez
--- Exemple : git branch
 Pour supprimer une branche:
---Exemple: git branch –d <nom-branche>

---git pull-----
 Pour fusionner toutes les modifications présentes sur le dépôt distant dans le répertoire de travail local, la commande pull est utilisée. Usage:
--- Exemple : git pull

---git merge------
 La commande git merge est utilisée pour fusionner une branche dans la branche active. Usage:
--- Exemple : git merge <nom-branche>

-----git diff ---
 La commande git diff permet de lister les conflits. Pour visualiser les conflits d’un fichier, utilisez
---Exemple : git diff --base <nom-fichier>
  La commande suivante est utilisée pour afficher les conflits entre les branches à fusionner avant de les fusionner:
--- Exemple : git diff <branche-source> <branche-cible>
 Pour simplement énumérer tous les conflits actuels, utilisez:
--- Exemple : git diff


----git tag ---
 Le marquage est utilisé pour marquer des commits spécifiques avec des poignées simples. Un exemple peut être:
---Exemple: git tag 1.1.0 <insert-commitID-here>

---git log----
 L’ exécution de cette commande génère le log d’une branche. Un exemple de sortie :
  ---Exemple : commit 15f4b6c44b3c8344caasdac9e4be13246e21sadw 
               Author: Alex Hunter <alexh@gmail.com> 
               Date: Mon Oct 1 12:56:29 2016 -0600
               
---git reset---
  Pour réinitialiser l’index et le répertoire de travail à l’état du dernier commit, la commande git reset est utilisée :
  ----Exemple : git reset --hard HEAD
  
----git rm---
   Git rm peut être utilisé pour supprimer des fichiers de l’index et du répertoire de travail. Usage:
---Exemple : git rm nomfichier.txt

-----git stash----
 L’une des moins connues, git stash aide à enregistrer les changements qui ne doivent pas être commit immédiatement. C’est un commit temporaire.   Usage:
 ---Exemple : git stash
 
---git show---
  Pour afficher des informations sur tout fichier git, utilisez la commande git show . Par exemple:
 ---Exemple : git show
 
--- git fetch ---
  Git fetch permet à un utilisateur d’extraire tous les fichiers du dépôt distant qui ne sont pas actuellement dans le répertoire de travail local. Exemple d’utilisation:
---Exemple : git fetch origin

